"use strict";(self.webpackChunkpointnetwork_github_io=self.webpackChunkpointnetwork_github_io||[]).push([[4041],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6240:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"Accounts",sidebar_label:"Accounts"},i="Accounts",s={unversionedId:"point_chain/users/technical_concepts/accounts",id:"point_chain/users/technical_concepts/accounts",title:"Accounts",description:"This document describes the in-built accounts system of Point Chain.",source:"@site/docs/point_chain/users/technical_concepts/accounts.md",sourceDirName:"point_chain/users/technical_concepts",slug:"/point_chain/users/technical_concepts/accounts",permalink:"/docs/point_chain/users/technical_concepts/accounts",draft:!1,editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/users/technical_concepts/accounts.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1665298455,formattedLastUpdatedAt:"Oct 9, 2022",frontMatter:{title:"Accounts",sidebar_label:"Accounts"},sidebar:"pnSidebar",previous:{title:"Architecture",permalink:"/docs/point_chain/users/technical_concepts/architecture"},next:{title:"Chain ID",permalink:"/docs/point_chain/users/technical_concepts/chain_id"}},p={},l=[{value:"Pre-requisite Readings",id:"pre-requisite-readings",level:2},{value:"Point Chain Accounts",id:"point-chain-accounts",level:2},{value:"Addresses and Public Keys",id:"addresses-and-public-keys",level:2},{value:"Address formats for clients",id:"address-formats-for-clients",level:2},{value:"Address conversion",id:"address-conversion",level:3},{value:"Key output",id:"key-output",level:3},{value:"Querying an Account",id:"querying-an-account",level:2},{value:"Command Line Interface",id:"command-line-interface",level:3},{value:"Cosmos gRPC and REST",id:"cosmos-grpc-and-rest",level:3},{value:"JSON-RPC",id:"json-rpc",level:3}],c={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"accounts"},"Accounts"),(0,r.kt)("p",null,"This document describes the in-built accounts system of Point Chain."),(0,r.kt)("h2",{id:"pre-requisite-readings"},"Pre-requisite Readings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.cosmos.network/main/basics/accounts.html"},"Cosmos SDK Accounts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ethereum.org/en/whitepaper/#ethereum-accounts"},"Ethereum Accounts"))),(0,r.kt)("h2",{id:"point-chain-accounts"},"Point Chain Accounts"),(0,r.kt)("p",null,"Point Chain defines its own custom ",(0,r.kt)("inlineCode",{parentName:"p"},"Account")," type that uses Ethereum's ECDSA secp256k1 curve for keys. This\nsatisfies the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/EIPs/issues/84"},"EIP84")," for full ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP44")," paths.\nThe root HD path for Point Chain-based accounts is ",(0,r.kt)("inlineCode",{parentName:"p"},"m/44'/60'/0'/0"),"."),(0,r.kt)("h2",{id:"addresses-and-public-keys"},"Addresses and Public Keys"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/satoshilabs/slips/blob/master/slip-0173.md"},"BIP-0173")," defines a new format for segregated witness output addresses that contains a human-readable part that identifies the Bech32 usage. Point Chain uses the following HRP (human readable prefix) as the base HRP:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Network"),(0,r.kt)("th",{parentName:"tr",align:null},"Mainnet"),(0,r.kt)("th",{parentName:"tr",align:null},"Testnet"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Point Chain"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xpoint"))))),(0,r.kt)("p",null,"There are 3 main types of HRP for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Addresses"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"PubKeys")," available by default on Point Chain:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Addresses and Keys for ",(0,r.kt)("strong",{parentName:"li"},"accounts"),", which identify users (e.g. the sender of a ",(0,r.kt)("inlineCode",{parentName:"li"},"message"),"). They are derived using the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"eth_secp256k1"))," curve."),(0,r.kt)("li",{parentName:"ul"},"Addresses and Keys for ",(0,r.kt)("strong",{parentName:"li"},"validator operators"),", which identify the operators of validators. They are derived using the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"eth_secp256k1"))," curve."),(0,r.kt)("li",{parentName:"ul"},"Addresses and Keys for ",(0,r.kt)("strong",{parentName:"li"},"consensus nodes"),", which identify the validator nodes participating in consensus. They are derived using the ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"ed25519"))," curve.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Address bech32 Prefix"),(0,r.kt)("th",{parentName:"tr",align:null},"Pubkey bech32 Prefix"),(0,r.kt)("th",{parentName:"tr",align:null},"Curve"),(0,r.kt)("th",{parentName:"tr",align:null},"Address byte length"),(0,r.kt)("th",{parentName:"tr",align:null},"Pubkey byte length"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Accounts"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"point")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pointpub")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"eth_secp256k1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"33")," (compressed)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Validator Operator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pointvaloper")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pointvaloperpub")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"eth_secp256k1")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"33")," (compressed)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Consensus Nodes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pointvalcons")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pointvalconspub")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ed25519")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"20")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"32"))))),(0,r.kt)("h2",{id:"address-formats-for-clients"},"Address formats for clients"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EthAccount")," can be represented in both ",(0,r.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/Bech32"},"Bech32")," (",(0,r.kt)("inlineCode",{parentName:"p"},"point1..."),") and hex (",(0,r.kt)("inlineCode",{parentName:"p"},"0x..."),") formats for Ethereum's Web3 tooling compatibility."),(0,r.kt)("p",null,"The Bech32 format is the default format for Cosmos-SDK queries and transactions through CLI and REST\nclients. The hex format on the other hand, is the Ethereum ",(0,r.kt)("inlineCode",{parentName:"p"},"common.Address")," representation of a\nCosmos ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.AccAddress"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Address (Bech32)"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Address (",(0,r.kt)("a",{parentName:"strong",href:"https://eips.ethereum.org/EIPS/eip-55"},"EIP55")," Hex)"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"0x91defC7fE5603DFA8CC9B655cF5772459BF10c6f")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Compressed Public Key"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AsV5oddeB+hkByIJo/4lZiVUgXTzNfBPKC73cZ4K1YD2"}'))),(0,r.kt)("h3",{id:"address-conversion"},"Address conversion"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pointd debug addr <address>")," can be used to convert an address between hex and bech32 formats. For example:"),(0,r.kt)("admonition",{title:"Bech32",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pointd debug addr point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n  Address: [20 87 74 109 255 45 223 158 7 130 139 67 69 211 4 9 25 175 86 82]\n  Address (hex): 14574A6DFF2DDF9E07828B4345D3040919AF5652\n  Bech32 Acc: point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n  Bech32 Val: pointvaloper1z3t55m0l9h0eupuz3dp5t5cypyv674jjn4d6nn\n"))),(0,r.kt)("admonition",{title:"Hex",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pointd debug addr 14574A6DFF2DDF9E07828B4345D3040919AF5652\n  Address: [20 87 74 109 255 45 223 158 7 130 139 67 69 211 4 9 25 175 86 82]\n  Address (hex): 14574A6DFF2DDF9E07828B4345D3040919AF5652\n  Bech32 Acc: point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n  Bech32 Val: pointvaloper1z3t55m0l9h0eupuz3dp5t5cypyv674jjn4d6nn\n"))),(0,r.kt)("h3",{id:"key-output"},"Key output"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The Cosmos SDK Keyring output (i.e ",(0,r.kt)("inlineCode",{parentName:"p"},"pointd keys"),") only supports addresses and public keys in Bech32 format.")),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"keys show")," command of ",(0,r.kt)("inlineCode",{parentName:"p"},"pointd")," with the flag ",(0,r.kt)("inlineCode",{parentName:"p"},"--bech <type> (acc|val|cons)")," to\nobtain the addresses and keys as mentioned above,"),(0,r.kt)("admonition",{title:"Account",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pointd keys show mykey --bech acc\n- name: mykey\n  type: local\n  address: point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AsV5oddeB+hkByIJo/4lZiVUgXTzNfBPKC73cZ4K1YD2"}\'\n  mnemonic: ""\n'))),(0,r.kt)("admonition",{title:"Validator",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pointd keys show mykey --bech val\n- name: mykey\n  type: local\n  address: pointvaloper1z3t55m0l9h0eupuz3dp5t5cypyv674jjn4d6nn\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"AsV5oddeB+hkByIJo/4lZiVUgXTzNfBPKC73cZ4K1YD2"}\'\n  mnemonic: ""\n'))),(0,r.kt)("admonition",{title:"Consensus",type:"note"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'pointd keys show mykey --bech cons\n- name: mykey\n  type: local\n  address: pointvalcons1rllqa5d97n6zyjhy6cnscc7zu30zjn3f7wyj2n\n  pubkey: \'{"@type":"/ethermint.crypto.v1.ethsecp256k1.PubKey","key":"A/fVLgIqiLykFQxum96JkSOoTemrXD0tFaFQ1B0cpB2c"}\'\n  mnemonic: ""\n'))),(0,r.kt)("p",null,"::::"),(0,r.kt)("h2",{id:"querying-an-account"},"Querying an Account"),(0,r.kt)("p",null,"You can query an account address using the CLI, gRPC or"),(0,r.kt)("h3",{id:"command-line-interface"},"Command Line Interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# NOTE: the --output (-o) flag will define the output format in JSON or YAML (text)\npointd q auth account $(pointd keys show mykey -a) -o text\n|\n  '@type': /ethermint.types.v1.EthAccount\n  base_account:\n    account_number: \"0\"\n    address: point1z3t55m0l9h0eupuz3dp5t5cypyv674jj7mz2jw\n    pub_key:\n      '@type': /ethermint.crypto.v1.ethsecp256k1.PubKey\n      key: AsV5oddeB+hkByIJo/4lZiVUgXTzNfBPKC73cZ4K1YD2\n    sequence: \"1\"\n  code_hash: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n")),(0,r.kt)("h3",{id:"cosmos-grpc-and-rest"},"Cosmos gRPC and REST"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# GET /cosmos/auth/v1beta1/accounts/{address}\ncurl -X GET "http://localhost:10337/cosmos/auth/v1beta1/accounts/point14au322k9munkmx5wrchz9q30juf5wjgz2cfqku" -H "accept: application/json"\n')),(0,r.kt)("h3",{id:"json-rpc"},"JSON-RPC"),(0,r.kt)("p",null,"To retrieve the Ethereum hex address using Web3, use the JSON-RPC ",(0,r.kt)("a",{parentName:"p",href:"/docs/point_chain/developers/json-rpc/endpoints#eth-accounts"},(0,r.kt)("inlineCode",{parentName:"a"},"eth_accounts"))," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/point_chain/developers/json-rpc/endpoints#personal-listAccounts"},(0,r.kt)("inlineCode",{parentName:"a"},"personal_listAccounts"))," endpoints:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# query against a local node\ncurl -X POST --data \'{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}\' -H "Content-Type: application/json" http://localhost:8545\n\ncurl -X POST --data \'{"jsonrpc":"2.0","method":"personal_listAccounts","params":[],"id":1}\' -H "Content-Type: application/json" http://localhost:8545\n')))}d.isMDXComponent=!0}}]);