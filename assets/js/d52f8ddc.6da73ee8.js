"use strict";(self.webpackChunkpointnetwork_github_io=self.webpackChunkpointnetwork_github_io||[]).push([[6517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=s,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const o={title:"State Sync",sidebar_label:"State Sync"},r="State Sync",i={unversionedId:"point_chain/validators/setup/statesync",id:"point_chain/validators/setup/statesync",title:"State Sync",description:"Pre-requisites",source:"@site/docs/point_chain/validators/setup/statesync.md",sourceDirName:"point_chain/validators/setup",slug:"/point_chain/validators/setup/statesync",permalink:"/docs/point_chain/validators/setup/statesync",draft:!1,editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/validators/setup/statesync.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1665224898,formattedLastUpdatedAt:"Oct 8, 2022",frontMatter:{title:"State Sync",sidebar_label:"State Sync"},sidebar:"pnSidebar",previous:{title:"Disk Usage Optimization",permalink:"/docs/point_chain/validators/setup/disk_optimization"},next:{title:"Join Mainnet",permalink:"/docs/point_chain/validators/mainnet"}},l={},c=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"State Syncing a Node",id:"state-syncing-a-node",level:2},{value:"Use commands below for Mainnet setup",id:"use-commands-below-for-mainnet-setup",level:2},{value:"Check logs",id:"check-logs",level:3},{value:"Use this command to switch off your State Sync mode, after node fully synced to avoid problems in future node restarts!",id:"use-this-command-to-switch-off-your-state-sync-mode-after-node-fully-synced-to-avoid-problems-in-future-node-restarts",level:3}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"state-sync"},"State Sync"),(0,s.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../quickstart/installation"},"Install Point Node")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"../quickstart/run_node"},"Run Point Node"))),(0,s.kt)("h2",{id:"state-syncing-a-node"},"State Syncing a Node"),(0,s.kt)("p",null,"Once a few nodes in a network have taken state sync snapshots, new nodes can join the network using state sync. To do this, the node should first be configured as usual, and the following pieces of information must be obtained for light client verification:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Two available RPC servers (at least)"),(0,s.kt)("li",{parentName:"ul"},"Trusted height"),(0,s.kt)("li",{parentName:"ul"},"Block ID hash of trusted height")),(0,s.kt)("p",null,"The trusted hash must be obtained from a trusted source (eg. a block explorer), but the RPC servers do not need to be trusted. Tendermint will use the hash to obtain trusted app hashes from the blockchain in order to verify restored application snapshots. The app hash and corresponding height are the only pieces of information that can be trusted when restoring snapshots. Everything else can be forged by adversaries."),(0,s.kt)("p",null,"Set the node name"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'moniker="NODE_NAME"\n')),(0,s.kt)("h2",{id:"use-commands-below-for-mainnet-setup"},"Use commands below for Mainnet setup"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'SNAP_RPC1="http://rpc-mainnet-1.point.space:26659"\nSNAP_RPC="http://rpc-mainnet-1.point.space:26659"\nCHAIN_ID="point_10687-1"\nPEER="8673c1f04c29c464189e8bf29e51fb0b38da2f19@rpc-mainnet-1.point.space:26656"\nwget -O $HOME/genesis.json https://raw.githubusercontent.com/pointnetwork/point-chain-config/main/mainnet-1/genesis.json\n')),(0,s.kt)("p",null,"Reset the node"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pointd tendermint unsafe-reset-all --home $HOME/.pointd\n")),(0,s.kt)("p",null,'Change config files (set the node name, add persistent peers, set indexer = "null")'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i -e "s%^moniker *=.*%moniker = \\"$moniker\\"%; " $HOME/.pointd/config/config.toml\nsed -i -e "s%^indexer *=.*%indexer = \\"null\\"%; " $HOME/.pointd/config/config.toml\nsed -i -e "s%^persistent_peers *=.*%persistent_peers = \\"$PEER\\"%; " $HOME/.pointd/config/config.toml\n')),(0,s.kt)("p",null,"Set the variables for start from snapshot"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'LATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height); \\\nBLOCK_HEIGHT=$((LATEST_HEIGHT - 2000)); \\\nTRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)\n')),(0,s.kt)("p",null,"Check"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"echo $LATEST_HEIGHT $BLOCK_HEIGHT $TRUST_HASH\n")),(0,s.kt)("p",null,"Output example (numbers will be different):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"911348 909348 7A2C851A4ECCF5C6728411F53EAACD0D6E6A0C18BD77DB2E9AD91E78465930FC\n")),(0,s.kt)("p",null,"If output is OK do next"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\\1true| ; \\\n\ns|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\\1\\"$SNAP_RPC,$SNAP_RPC1\\"| ; \\\n\ns|^(trust_height[[:space:]]+=[[:space:]]+).*$|\\1$BLOCK_HEIGHT| ; \\\n\ns|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\\1\\"$TRUST_HASH\\"| ; \\\n\ns|^(seeds[[:space:]]+=[[:space:]]+).*$|\\1\\"\\"|" ~/.pointd/config/config.toml\n')),(0,s.kt)("p",null,"Now you just need to run the node."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pointd start\n")),(0,s.kt)("h3",{id:"check-logs"},"Check logs"),(0,s.kt)("p",null,"When the node is started it will then attempt to find a state sync snapshot in the network, and restore it:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'Started node                   module=main nodeInfo="..."\nDiscovering snapshots for 20s\nDiscovered new snapshot        height=3000 format=1 hash=0F14A473\nDiscovered new snapshot        height=2000 format=1 hash=C6209AF7\nOffering snapshot to ABCI app  height=3000 format=1 hash=0F14A473\nSnapshot accepted, restoring   height=3000 format=1 hash=0F14A473\nFetching snapshot chunk        height=3000 format=1 chunk=0 total=3\nFetching snapshot chunk        height=3000 format=1 chunk=1 total=3\nFetching snapshot chunk        height=3000 format=1 chunk=2 total=3\nApplied snapshot chunk         height=3000 format=1 chunk=0 total=3\nApplied snapshot chunk         height=3000 format=1 chunk=1 total=3\nApplied snapshot chunk         height=3000 format=1 chunk=2 total=3\nVerified ABCI app              height=3000 appHash=F7D66BC9\nSnapshot restored              height=3000 format=1 hash=0F14A473\nExecuted block                 height=3001 validTxs=16 invalidTxs=0\nCommitted state                height=3001 txs=16 appHash=0FDBB0D5F\nExecuted block                 height=3002 validTxs=25 invalidTxs=0\nCommitted state                height=3002 txs=25 appHash=40D12E4B3\n')),(0,s.kt)("p",null,"The node is now state synced, having joined the network in seconds"),(0,s.kt)("h3",{id:"use-this-command-to-switch-off-your-state-sync-mode-after-node-fully-synced-to-avoid-problems-in-future-node-restarts"},"Use this command to switch off your State Sync mode, after node fully synced to avoid problems in future node restarts!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\\1false|" $HOME/.pointd/config/config.toml\n')))}h.isMDXComponent=!0}}]);