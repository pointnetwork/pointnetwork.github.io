"use strict";(self.webpackChunkpointnetwork_github_io=self.webpackChunkpointnetwork_github_io||[]).push([[3050],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),d=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),g=o,b=c["".concat(u,".").concat(g)]||c[g]||s[g]||i;return t?r.createElement(b,a(a({ref:n},p),{},{components:t})):r.createElement(b,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=c;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5798:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(7462),o=(t(7294),t(3905));const i={id:"build-debugging",title:"Debugging",sidebar_label:"Debugging",slug:"../build-debugging"},a=void 0,l={unversionedId:"build/build-debugging",id:"build/build-debugging",title:"Debugging",description:"Run a Point Network Node in a VS Code Debugger",source:"@site/docs/build/build-debugging.md",sourceDirName:"build",slug:"/build-debugging",permalink:"/docs/build-debugging",draft:!1,editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/build/build-debugging.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1667470644,formattedLastUpdatedAt:"Nov 3, 2022",frontMatter:{id:"build-debugging",title:"Debugging",sidebar_label:"Debugging",slug:"../build-debugging"},sidebar:"pnSidebar",previous:{title:"Point Network Environments",permalink:"/docs/build-environments"},next:{title:"Zapp Development Environment using Docker",permalink:"/docs/build-zapp-dev-environment-docker"}},u={},d=[{value:"Run a Point Network Node in a VS Code Debugger",id:"run-a-point-network-node-in-a-vs-code-debugger",level:3},{value:"Sample launch.json file",id:"sample-launchjson-file",level:3}],p={toc:d};function s(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"run-a-point-network-node-in-a-vs-code-debugger"},"Run a Point Network Node in a VS Code Debugger"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE"),": You need to setup your local ",(0,o.kt)("a",{parentName:"p",href:"/docs/build-zapp-dev-environment-direct-install"},"dev environment")," first."),(0,o.kt)("p",null,"To debug the Point Network node in VS code:"),(0,o.kt)("p",null,"In your local pointnetowrk node folder, generate compiled typescript sourcemap files by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm run build -- --sourcemap\n")),(0,o.kt)("p",null,"This will create a ",(0,o.kt)("inlineCode",{parentName:"p"},"dist")," directory including ",(0,o.kt)("inlineCode",{parentName:"p"},"*.js.map")," files which are used by the VS Code debugger."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open VS Code"),(0,o.kt)("li",{parentName:"ol"},"Open the Debugger tool"),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("inlineCode",{parentName:"li"},"create a launch.json"),' file (located under the blue "Run and Debug" button)'),(0,o.kt)("li",{parentName:"ol"},"Select 'Node JS' from the environment drop down"),(0,o.kt)("li",{parentName:"ol"},"Replace the file created with the sample ",(0,o.kt)("inlineCode",{parentName:"li"},"launch.json")," file shown below."),(0,o.kt)("li",{parentName:"ol"},"Make sure all the dependent dev services are running such as Arlocal and Ganache (as per the local ",(0,o.kt)("a",{parentName:"li",href:"/docs/build-zapp-dev-environment-direct-install"},"dev environment setup instructions"),")"),(0,o.kt)("li",{parentName:"ol"},"Click the 'Play' icon next to 'Launch Program' dropdown on the top left"),(0,o.kt)("li",{parentName:"ol"},"Open a 'Debug Console' tab in VS Code and you will see the running Point Node logs"),(0,o.kt)("li",{parentName:"ol"},"Add a breakpoint to any part of the Point Node JS code (perhaps in one of the common handlers in the client proxy)"),(0,o.kt)("li",{parentName:"ol"},"Open the Point Browser by running the alias ",(0,o.kt)("inlineCode",{parentName:"li"},"point-browser-owner")),(0,o.kt)("li",{parentName:"ol"},"Now you can inspect the variables in VS Code and use the debugger as usual."),(0,o.kt)("li",{parentName:"ol"},"Continue to add breakpoints where you need to assist with your build-debugging!")),(0,o.kt)("h3",{id:"sample-launchjson-file"},"Sample launch.json file"),(0,o.kt)("p",null,"Below is a sample ",(0,o.kt)("inlineCode",{parentName:"p"},"launch.json")," file that you can use. Its the same as the one generated by VS code with the ",(0,o.kt)("inlineCode",{parentName:"p"},"outputCapture")," key added:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "type": "pwa-node",\n            "request": "launch",\n            "name": "Launch Point Node",\n            "skipFiles": [\n                "<node_internals>/**"\n            ],\n            "program": "${workspaceFolder}/point",\n            "outputCapture": "std",\n            "env": {\n                "NODE_CONFIG_ENV": "devlocal",\n                "MODE": "zappdev"\n            }\n        }\n    ]\n}\n')))}s.isMDXComponent=!0}}]);