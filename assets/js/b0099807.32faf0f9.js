"use strict";(self.webpackChunkpointnetwork_github_io=self.webpackChunkpointnetwork_github_io||[]).push([[3094],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,k=u["".concat(d,".").concat(m)]||u[m]||c[m]||l;return n?a.createElement(k,r(r({ref:t},s),{},{components:n})):a.createElement(k,r({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const l={},r=void 0,i={unversionedId:"point_chain/developers/localnet/multi_node",id:"point_chain/developers/localnet/multi_node",title:"multi_node",description:"\x3c!--",source:"@site/docs/point_chain/developers/localnet/multi_node.md",sourceDirName:"point_chain/developers/localnet",slug:"/point_chain/developers/localnet/multi_node",permalink:"/docs/point_chain/developers/localnet/multi_node",draft:!1,editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/developers/localnet/multi_node.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1665224535,formattedLastUpdatedAt:"Oct 8, 2022",frontMatter:{}},d={},p=[{value:"Pre-requisite Readings",id:"pre-requisite-readings",level:2},{value:"Automated Localnet with Ignite CLI",id:"automated-localnet-with-ignite-cli",level:2},{value:"Automated Localnet with Docker",id:"automated-localnet-with-docker",level:2},{value:"Build &amp; Start",id:"build--start",level:3},{value:"Stop Localnet",id:"stop-localnet",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Logging",id:"logging",level:3},{value:"Follow Logs",id:"follow-logs",level:4},{value:"Interact with the Localnet",id:"interact-with-the-localnet",level:3},{value:"Ethereum JSON-RPC &amp; Websocket Ports",id:"ethereum-json-rpc--websocket-ports",level:4},{value:"Keys &amp; Accounts",id:"keys--accounts",level:3},{value:"Special Binaries",id:"special-binaries",level:3}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"multi-node"},"Multi Node"),(0,o.kt)("h2",{id:"pre-requisite-readings"},"Pre-requisite Readings"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.ignite.com/guide/install.html"},"Install Ignite CLI")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/installation/"},"Install Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"Install docker-compose"))),(0,o.kt)("h2",{id:"automated-localnet-with-ignite-cli"},"Automated Localnet with Ignite CLI"),(0,o.kt)("p",null,"Once you have installed ",(0,o.kt)("inlineCode",{parentName:"p"},"ignite"),", just run the localnet by using"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ignite chain serve\n")),(0,o.kt)("p",null,"Detailed instructions can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ignite.com/kb/serve.html"},"Ignite CLI documentation")),(0,o.kt)("h2",{id:"automated-localnet-with-docker"},"Automated Localnet with Docker"),(0,o.kt)("h3",{id:"build--start"},"Build & Start"),(0,o.kt)("p",null,"To build start a 4 node testnet run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make localnet-start\n")),(0,o.kt)("p",null,"This command creates a 4-node network using the ",(0,o.kt)("inlineCode",{parentName:"p"},"pointdnode")," Docker image.\nThe ports for each node are found in this table:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Node ID"),(0,o.kt)("th",{parentName:"tr",align:null},"P2P Port"),(0,o.kt)("th",{parentName:"tr",align:null},"Tendermint RPC Port"),(0,o.kt)("th",{parentName:"tr",align:null},"REST/ Ethereum JSON-RPC Port"),(0,o.kt)("th",{parentName:"tr",align:null},"WebSocket Port"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"evmosnode0")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26656")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26657")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8545")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8546"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"evmosnode1")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26659")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26660")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8547")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8548"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"evmosnode2")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26661")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26662")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8549")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8550"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"evmosnode3")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26663")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"26664")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8551")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8552"))))),(0,o.kt)("p",null,"To update the binary, just rebuild it and restart the nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make localnet-start\n")),(0,o.kt)("p",null,"The command above  command will run containers in the background using Docker compose. You will see the network being created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'...\nCreating network "evmos_localnet" with driver "bridge"\nCreating pointdnode0 ... done\nCreating pointdnode2 ... done\nCreating pointdnode1 ... done\nCreating pointdnode3 ... done\n')),(0,o.kt)("h3",{id:"stop-localnet"},"Stop Localnet"),(0,o.kt)("p",null,"Once you are done, execute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make localnet-stop\n")),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"make localnet-start")," creates files for a 4-node testnet in ",(0,o.kt)("inlineCode",{parentName:"p"},"./build")," by\ncalling the ",(0,o.kt)("inlineCode",{parentName:"p"},"pointd testnet")," command. This outputs a handful of files in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"./build")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"tree -L 3 build/\n\nbuild/\n\u251c\u2500\u2500 pointd\n\u251c\u2500\u2500 pointd\n\u251c\u2500\u2500 gentxs\n\u2502\xa0\xa0 \u251c\u2500\u2500 node0.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 node1.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 node2.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 node3.json\n\u251c\u2500\u2500 node0\n\u2502\xa0\xa0 \u251c\u2500\u2500 pointd\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 key_seed.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 keyring-test-cosmos\n\u2502\xa0\xa0 \u2514\u2500\u2500 pointd\n\u2502\xa0\xa0     \u251c\u2500\u2500 config\n\u2502\xa0\xa0     \u251c\u2500\u2500 data\n\u2502\xa0\xa0     \u2514\u2500\u2500 pointd.log\n\u251c\u2500\u2500 node1\n\u2502\xa0\xa0 \u251c\u2500\u2500 pointd\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 key_seed.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 keyring-test-cosmos\n\u2502\xa0\xa0 \u2514\u2500\u2500 pointd\n\u2502\xa0\xa0     \u251c\u2500\u2500 config\n\u2502\xa0\xa0     \u251c\u2500\u2500 data\n\u2502\xa0\xa0     \u2514\u2500\u2500 pointd.log\n\u251c\u2500\u2500 node2\n\u2502\xa0\xa0 \u251c\u2500\u2500 pointd\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 key_seed.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 keyring-test-cosmos\n\u2502\xa0\xa0 \u2514\u2500\u2500 pointd\n\u2502\xa0\xa0     \u251c\u2500\u2500 config\n\u2502\xa0\xa0     \u251c\u2500\u2500 data\n\u2502\xa0\xa0     \u2514\u2500\u2500 pointd.log\n\u2514\u2500\u2500 node3\n    \u251c\u2500\u2500 pointd\n    \u2502\xa0\xa0 \u251c\u2500\u2500 key_seed.json\n    \u2502\xa0\xa0 \u2514\u2500\u2500 keyring-test-cosmos\n    \u2514\u2500\u2500 pointd\n        \u251c\u2500\u2500 config\n        \u251c\u2500\u2500 data\n        \u2514\u2500\u2500 pointd.log\n")),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"./build/nodeN")," directory is mounted to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/pointd")," directory in each container."),(0,o.kt)("h3",{id:"logging"},"Logging"),(0,o.kt)("p",null,"In order to see the logs of a particular node you can use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# node 0: daemon logs\ndocker exec pointdnode0 tail pointd.log\n\n# node 0: REST & RPC logs\ndocker exec pointdnode0 tail pointd.log\n")),(0,o.kt)("p",null,"The logs for the daemon will look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"I[2020-07-29|17:33:52.452] starting ABCI with Tendermint                module=main\nE[2020-07-29|17:33:53.394] Can't add peer's address to addrbook         module=p2p err=\"Cannot add non-routable address 272a247b837653cf068d39efd4c407ffbd9a0e6f@192.168.10.5:26656\"\nE[2020-07-29|17:33:53.394] Can't add peer's address to addrbook         module=p2p err=\"Cannot add non-routable address 3e05d3637b7ebf4fc0948bbef01b54d670aa810a@192.168.10.4:26656\"\nE[2020-07-29|17:33:53.394] Can't add peer's address to addrbook         module=p2p err=\"Cannot add non-routable address 689f8606ede0b26ad5b79ae244c14cc67ab4efe7@192.168.10.3:26656\"\nI[2020-07-29|17:33:58.828] Executed block                               module=state height=88 validTxs=0 invalidTxs=0\nI[2020-07-29|17:33:58.830] Committed state                              module=state height=88 txs=0 appHash=90CC5FA53CF8B5EC49653A14DA20888AD81C92FCF646F04D501453FD89FCC791\nI[2020-07-29|17:34:04.032] Executed block                               module=state height=89 validTxs=0 invalidTxs=0\nI[2020-07-29|17:34:04.034] Committed state                              module=state height=89 txs=0 appHash=0B54C4DB1A0DACB1EEDCD662B221C048C826D309FD2A2F31FF26BAE8D2D7D8D7\nI[2020-07-29|17:34:09.381] Executed block                               module=state height=90 validTxs=0 invalidTxs=0\nI[2020-07-29|17:34:09.383] Committed state                              module=state height=90 txs=0 appHash=75FD1EE834F0669D5E717C812F36B21D5F20B3CCBB45E8B8D415CB9C4513DE51\nI[2020-07-29|17:34:14.700] Executed block                               module=state height=91 validTxs=0 invalidTxs=0\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can disregard the ",(0,o.kt)("inlineCode",{parentName:"p"},"Can't add peer's address to addrbook")," warning. As long as the blocks are\nbeing produced and the app hashes are the same for each node, there should not be any issues.")),(0,o.kt)("p",null,"Whereas the logs for the REST & RPC server would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'I[2020-07-30|09:39:17.488] Starting application REST service (chain-id: "7305661614933169792")... module=rest-server\nI[2020-07-30|09:39:17.488] Starting RPC HTTP server on 127.0.0.1:8545   module=rest-server\n...\n')),(0,o.kt)("h4",{id:"follow-logs"},"Follow Logs"),(0,o.kt)("p",null,"You can also watch logs as they are produced via Docker with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--follow")," (",(0,o.kt)("inlineCode",{parentName:"p"},"-f"),") flag, for\nexample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs -f pointdnode0\n")),(0,o.kt)("h3",{id:"interact-with-the-localnet"},"Interact with the Localnet"),(0,o.kt)("h4",{id:"ethereum-json-rpc--websocket-ports"},"Ethereum JSON-RPC & Websocket Ports"),(0,o.kt)("p",null,"To interact with the testnet via WebSockets or RPC/API, you will send your request to the corresponding ports:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"EVM JSON-RPC"),(0,o.kt)("th",{parentName:"tr",align:null},"Eth Websocket"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8545")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"8546"))))),(0,o.kt)("p",null,"You can send a curl command such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}\' -H "Content-Type: application/json" 192.162.10.1:8545\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The IP address will be the public IP of the docker container.")),(0,o.kt)("p",null,"Additional instructions on how to interact with the WebSocket can be found on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/point_chain/developers/json-rpc/events#ethereum-websocket"},"events documentation"),"."),(0,o.kt)("h3",{id:"keys--accounts"},"Keys & Accounts"),(0,o.kt)("p",null,"To interact with ",(0,o.kt)("inlineCode",{parentName:"p"},"pointd")," and start querying state or creating txs, you use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"pointd")," directory of any given node as your ",(0,o.kt)("inlineCode",{parentName:"p"},"home"),", for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pointd keys list --home ./build/node0/pointd\n")),(0,o.kt)("p",null,"Now that accounts exists, you may create new accounts and send those accounts\nfunds!"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Note"),": Each node's seed is located at ",(0,o.kt)("inlineCode",{parentName:"p"},"./build/nodeN/pointd/key_seed.json")," and can be restored to the CLI using the ",(0,o.kt)("inlineCode",{parentName:"p"},"pointd keys add --restore")," command")),(0,o.kt)("h3",{id:"special-binaries"},"Special Binaries"),(0,o.kt)("p",null,"If you have multiple binaries with different names, you can specify which one to run with the BINARY environment variable. The path of the binary is relative to the attached volume. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Run with custom binary\nBINARY=evmos make localnet-start\n")))}c.isMDXComponent=!0}}]);