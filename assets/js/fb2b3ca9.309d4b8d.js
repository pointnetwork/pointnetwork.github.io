"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7962],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,b=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3306:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(83117),a=n(80102),o=(n(67294),n(3905)),i=["components"],l={title:"Rollback",sidebar_label:"Rollback"},c="Rollback",s={unversionedId:"point_chain/validators/upgrades/rollback",id:"point_chain/validators/upgrades/rollback",title:"Rollback",description:"Learn how to rollback the chain version in the case of an unsuccessful chain upgrade.",source:"@site/docs/point_chain/validators/upgrades/rollback.md",sourceDirName:"point_chain/validators/upgrades",slug:"/point_chain/validators/upgrades/rollback",permalink:"/docs/point_chain/validators/upgrades/rollback",editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/validators/upgrades/rollback.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1663327596,formattedLastUpdatedAt:"9/16/2022",frontMatter:{title:"Rollback",sidebar_label:"Rollback"},sidebar:"pnSidebar",previous:{title:"Upgrades",permalink:"/docs/point_chain/validators/upgrades/"},next:{title:"Manual Upgrades",permalink:"/docs/point_chain/validators/upgrades/manual"}},p=[{value:"Restoring State Procedure",id:"restoring-state-procedure",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rollback"},"Rollback"),(0,o.kt)("p",null,"Learn how to rollback the chain version in the case of an unsuccessful chain upgrade."),(0,o.kt)("p",null,"In order to restore a previous chain version, the following data must be recovered by validators:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the database that contains the state of the previous chain (in ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.pointd/data")," by default)"),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"priv_validator_state.json")," file of the validator (also in ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.pointd/data")," by default)")),(0,o.kt)("p",null,"If validators don't possess their database data, another validator should share a copy of the database. Validators will be able to download a copy of the data and verify it before starting their node. If validators don't have the backup ",(0,o.kt)("inlineCode",{parentName:"p"},"priv_validator_state.json")," file, then those validators will not have double-sign protection on their first block."),(0,o.kt)("h2",{id:"restoring-state-procedure"},"Restoring State Procedure"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First, stop your node.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Then, copy the contents of your backup data directory back to the ",(0,o.kt)("inlineCode",{parentName:"p"},"$EVMOS_HOME/data")," directory (which, by default, should be ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.pointd/data"),")."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Assumes backup is stored in "backup" directory\nrm -rf ~/.pointd/data\nmv backup/.pointd/data ~/.pointd/data\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Next, install the previous version of Point Chain.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# from pointd directory\ngit checkout <prev_version>\nmake install\n## verify version\npointd version --long\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Finally, start the node.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pointd start\n")))}u.isMDXComponent=!0}}]);