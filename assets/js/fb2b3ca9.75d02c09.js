"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7962],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=n,b=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return r?a.createElement(b,i(i({ref:t},p),{},{components:r})):a.createElement(b,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3306:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=r(83117),n=r(80102),o=(r(67294),r(3905)),i=["components"],l={title:"Rollback",sidebar_label:"Rollback"},c="Rollback",s={unversionedId:"point_chain/validators/upgrades/rollback",id:"point_chain/validators/upgrades/rollback",title:"Rollback",description:"Learn how to rollback the chain version in the case of an unsuccessful chain upgrade.",source:"@site/docs/point_chain/validators/upgrades/rollback.md",sourceDirName:"point_chain/validators/upgrades",slug:"/point_chain/validators/upgrades/rollback",permalink:"/docs/point_chain/validators/upgrades/rollback",editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/validators/upgrades/rollback.md",tags:[],version:"current",lastUpdatedBy:"sergevar",lastUpdatedAt:1664017622,formattedLastUpdatedAt:"9/24/2022",frontMatter:{title:"Rollback",sidebar_label:"Rollback"},sidebar:"pnSidebar",previous:{title:"Upgrades",permalink:"/docs/point_chain/validators/upgrades/"},next:{title:"Manual Upgrades",permalink:"/docs/point_chain/validators/upgrades/manual"}},p=[{value:"Restoring State Procedure",id:"restoring-state-procedure",children:[],level:2}],d={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rollback"},"Rollback"),(0,o.kt)("p",null,"Learn how to rollback the chain version in the case of an unsuccessful chain upgrade."),(0,o.kt)("p",null,"In order to restore a previous chain version, the following data must be recovered by validators:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the database that contains the state of the previous chain (in ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.pointd/data")," by default)"),(0,o.kt)("li",{parentName:"ul"},"the ",(0,o.kt)("inlineCode",{parentName:"li"},"priv_validator_state.json")," file of the validator (also in ",(0,o.kt)("inlineCode",{parentName:"li"},"~/.pointd/data")," by default)")),(0,o.kt)("p",null,"If validators don't possess their database data, another validator should share a copy of the database. Validators will be able to download a copy of the data and verify it before starting their node. If validators don't have the backup ",(0,o.kt)("inlineCode",{parentName:"p"},"priv_validator_state.json")," file, then those validators will not have double-sign protection on their first block."),(0,o.kt)("h2",{id:"restoring-state-procedure"},"Restoring State Procedure"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"First, stop your node.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Then, copy the contents of your backup data directory back to the ",(0,o.kt)("inlineCode",{parentName:"p"},"$EVMOS_HOME/data")," directory (which, by default, should be ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.pointd/data"),")."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Assumes backup is stored in "backup" directory\nrm -rf ~/.pointd/data\nmv backup/.pointd/data ~/.pointd/data\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Next, install the previous version of Point Chain.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# from pointd directory\ngit checkout <prev_version>\nmake install\n## verify version\npointd version --long\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Finally, start the node.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pointd start\n")))}u.isMDXComponent=!0}}]);