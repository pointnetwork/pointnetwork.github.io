"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[684],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},81379:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=t(83117),r=t(80102),l=(t(67294),t(3905)),o=["components"],s={title:"Run an IBC Relayer",sidebar_label:"Run an IBC Relayer"},i="Run an IBC Relayer",p={unversionedId:"point_chain/validators/run_relayer",id:"point_chain/validators/run_relayer",title:"Run an IBC Relayer",description:"Learn how to run an IBC Relayer for Point Chain.",source:"@site/docs/point_chain/validators/run_relayer.md",sourceDirName:"point_chain/validators",slug:"/point_chain/validators/run_relayer",permalink:"/docs/point_chain/validators/run_relayer",editUrl:"https://github.com/pointnetwork/pointnetwork.github.io/edit/main/website/docs/point_chain/validators/run_relayer.md",tags:[],version:"current",lastUpdatedBy:"Darren Jensen",lastUpdatedAt:1664355522,formattedLastUpdatedAt:"9/28/2022",frontMatter:{title:"Run an IBC Relayer",sidebar_label:"Run an IBC Relayer"}},c=[{value:"Minimum Requirements",id:"minimum-requirements",children:[],level:2},{value:"Prerequisites",id:"prerequisites",children:[],level:2},{value:"Point Chain Daemon Settings",id:"point-chain-daemon-settings",children:[],level:2},{value:"Cosmos Daemon Settings",id:"cosmos-daemon-settings",children:[],level:2},{value:"Install Rust Dependencies",id:"install-rust-dependencies",children:[],level:2},{value:"Build &amp; Setup Hermes",id:"build--setup-hermes",children:[],level:2},{value:"Final Checks",id:"final-checks",children:[],level:2},{value:"Helpful Commands",id:"helpful-commands",children:[],level:2}],d={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"run-an-ibc-relayer"},"Run an IBC Relayer"),(0,l.kt)("p",null,"Learn how to run an IBC Relayer for Point Chain."),(0,l.kt)("h2",{id:"minimum-requirements"},"Minimum Requirements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"8 core (4 physical core), x86_64 architecture processor"),(0,l.kt)("li",{parentName:"ul"},"32 GB RAM (or equivalent swap file set up)"),(0,l.kt)("li",{parentName:"ul"},"1 TB+ nVME drives")),(0,l.kt)("p",null,"If running many nodes on a single VM, ",(0,l.kt)("a",{parentName:"p",href:"https://tecadmin.net/increase-open-files-limit-ubuntu/"},"ensure your open files limit is increased"),"."),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"Before beginning, ensure you have an Point Chain node running in the background of the same machine that you intend to relay on. Follow ",(0,l.kt)("a",{parentName:"p",href:"/docs/point_chain/validators/quickstart/run_node"},"this guide")," to set up an Point Chain node if you have not already."),(0,l.kt)("p",null,"In this guide, we will be relaying between ",(0,l.kt)("a",{parentName:"p",href:"https://www.mintscan.io/evmos/relayers"},"Point Chain (channel-3) and Cosmos Hub (channel-292)"),". When setting up your Point Chain and Cosmos full nodes, be sure to offset the ports being used in both the ",(0,l.kt)("inlineCode",{parentName:"p"},"app.toml")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," files of the respective chains (this process will be shown below)."),(0,l.kt)("p",null,"In this example, the default ports for Point Chain will be used, and the ports of the Cosmos Hub node will be manually changed."),(0,l.kt)("h2",{id:"point-chain-daemon-settings"},"Point Chain Daemon Settings"),(0,l.kt)("p",null,"First, set ",(0,l.kt)("inlineCode",{parentName:"p"},"grpc server")," on port ",(0,l.kt)("inlineCode",{parentName:"p"},"9090")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app.toml")," file from the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.pointd/config")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim $HOME/.pointd/config/app.toml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[grpc]\n\n# Enable defines if the gRPC server should be enabled.\nenable = true\n\n# Address defines the gRPC server address to bind to.\naddress = "0.0.0.0:9090"\n')),(0,l.kt)("p",null,"Then, set the ",(0,l.kt)("inlineCode",{parentName:"p"},"pprof_laddr")," to port ",(0,l.kt)("inlineCode",{parentName:"p"},"6060"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc laddr")," to port ",(0,l.kt)("inlineCode",{parentName:"p"},"26657"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"prp laddr")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"26656")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file from the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.pointd/config")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim $HOME/.pointd/config/config.toml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# pprof listen address (https://golang.org/pkg/net/http/pprof)\npprof_laddr = "localhost:6060"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[rpc]\n\n# TCP or UNIX socket address for the RPC server to listen on\nladdr = "tcp://127.0.0.1:26657"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[p2p]\n\n# Address to listen for incoming connections\nladdr = "tcp://0.0.0.0:26656"\n')),(0,l.kt)("h2",{id:"cosmos-daemon-settings"},"Cosmos Daemon Settings"),(0,l.kt)("p",null,"First, set ",(0,l.kt)("inlineCode",{parentName:"p"},"grpc server")," to port ",(0,l.kt)("inlineCode",{parentName:"p"},"9090")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"app.toml")," file from the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.gaiad/config")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim $HOME/.gaiad/config/app.toml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[grpc]\n\n# Enable defines if the gRPC server should be enabled.\nenable = true\n\n# Address defines the gRPC server address to bind to.\naddress = "0.0.0.0:9092"\n')),(0,l.kt)("p",null,"Then, set the ",(0,l.kt)("inlineCode",{parentName:"p"},"pprof_laddr")," to port ",(0,l.kt)("inlineCode",{parentName:"p"},"6062"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc laddr")," to port ",(0,l.kt)("inlineCode",{parentName:"p"},"26757"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"prp laddr")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"26756")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," file from the ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.gaiad/config")," directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim $HOME/.gaiad/config/app.toml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'# pprof listen address (https://golang.org/pkg/net/http/pprof)\npprof_laddr = "localhost:6062"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[rpc]\n\n# TCP or UNIX socket address for the RPC server to listen on\nladdr = "tcp://127.0.0.1:26757"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'[p2p]\n\n# Address to listen for incoming connections\nladdr = "tcp://0.0.0.0:26756"\n')),(0,l.kt)("h2",{id:"install-rust-dependencies"},"Install Rust Dependencies"),(0,l.kt)("p",null,"Install the following rust dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"source $HOME/.cargo/env\nsudo apt-get install pkg-config libssl-dev\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install librust-openssl-dev build-essential git\n")),(0,l.kt)("h2",{id:"build--setup-hermes"},"Build & Setup Hermes"),(0,l.kt)("p",null,"Create the directory where the binary will be placed, clone the hermes source repository, and build it using the latest release."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p $HOME/hermes\ngit clone https://github.com/informalsystems/ibc-rs.git hermes\ncd hermes\ngit checkout v0.12.0\ncargo install ibc-relayer-cli --bin hermes --locked\n")),(0,l.kt)("p",null,"Make the hermes ",(0,l.kt)("inlineCode",{parentName:"p"},"config")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"keys")," directory, and copy ",(0,l.kt)("inlineCode",{parentName:"p"},"config.toml")," to the config directory:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p $HOME/.hermes\nmkdir -p $HOME/.hermes/keys\ncp config.toml $HOME/.hermes\n")),(0,l.kt)("p",null,"Check the hermes version and configuration directory setup:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ hermes version\nINFO ThreadId(01) using default configuration from '/home/relay/.hermes/config.toml'\nhermes 0.12.0\n")),(0,l.kt)("p",null,"Edit the hermes configuration (use ports according the port configuration set above, adding only chains that will be relayed):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"vim $HOME/.hermes/config/config.toml\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# In this example, we will set channel-292 on the cosmoshub-4 chain settings and channel-3 on the point_10687-1 chain settings:\n[[chains]]\nid = 'cosmoshub-4'\nrpc_addr = 'http://127.0.0.1:26757'\ngrpc_addr = 'http://127.0.0.1:9092'\nwebsocket_addr = 'ws://127.0.0.1:26757/websocket'\n...\n[chains.packet_filter]\npolicy = 'allow'\nlist = [\n   ['transfer', 'channel-292'], # point_10687-1\n]\n\n[[chains]]\nid = 'point_10687-1'\nrpc_addr = 'http://127.0.0.1:26657'\ngrpc_addr = 'http://127.0.0.1:9090'\nwebsocket_addr = 'ws://127.0.0.1:26657/websocket'\n...\n[chains.packet_filter]\npolicy = 'allow'\nlist = [\n  ['transfer', 'channel-3'], # cosmoshub-4\n]\n")),(0,l.kt)("p",null,"Add your relayer wallet to Hermes' keyring (located in ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.hermes/keys"),")"),(0,l.kt)("p",null,"The best practice is to use the same mnemonic over all networks. Do not use your relaying-addresses for anything else, because it will lead to account sequence errors."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'hermes keys restore cosmoshub-4 -m "24-word mnemonic seed"\nhermes keys restore point_10687-1 -m "24-word mnemonic seed"\n')),(0,l.kt)("p",null,"Ensure this wallet has funds in both EVMOS and ATOM in order to pay the fees required to relay."),(0,l.kt)("h2",{id:"final-checks"},"Final Checks"),(0,l.kt)("p",null,"Validate your hermes configuration file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ hermes config validate\nINFO ThreadId(01) using default configuration from '/home/relay/.hermes/config.toml'\nSuccess: \"validation passed successfully\"\n")),(0,l.kt)("p",null,"Perform the hermes ",(0,l.kt)("inlineCode",{parentName:"p"},"health-check")," to see if all connected nodes are up and synced:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ hermes health-check\nINFO ThreadId(01) using default configuration from '/home/relay/.hermes/config.toml'\nINFO ThreadId(01) telemetry service running, exposing metrics at http://0.0.0.0:3001/metrics\nINFO ThreadId(01) starting REST API server listening at http://127.0.0.1:3000\nINFO ThreadId(01) [cosmoshub-4] chain is healthy\nINFO ThreadId(01) [point_10687-1] chain is healthy\n")),(0,l.kt)("p",null,"When your nodes are fully synced, you can start the hermes daemon:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes start\n")),(0,l.kt)("p",null,"Watch hermes' output for successfully relayed packets, or any errors. It will try and clear any unrecieved packets after startup has completed."),(0,l.kt)("h2",{id:"helpful-commands"},"Helpful Commands"),(0,l.kt)("p",null,'Query hermes for unrecieved packets and acknowledgements (ie. check if channels are "clear") with the following:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes query packet unreceived-packets cosmoshub-4 transfer channel-292\nhermes query packet unreceived-acks cosmoshub-4 transfer channel-292\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes query packet unreceived-packets point_10687-1 transfer channel-3\nhermes query packet unreceived-acks point_10687-1 transfer channel-3\n")),(0,l.kt)("p",null,"Query hermes for packet commitments with the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes query packet commitments cosmoshub-4 transfer channel-292\nhermes query packet commitments point_10687-1 transfer channel-3\n")),(0,l.kt)("p",null,"Clear the channel (only works on hermes ",(0,l.kt)("inlineCode",{parentName:"p"},"v0.12.0")," and higher) with the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes clear packets cosmoshub-4 transfer channel-292\nhermes clear packets point_10687-1 transfer channel-3\n")),(0,l.kt)("p",null,"Clear unrecieved packets manually (experimental, will need to stop hermes daemon to prevent confusion with account sequences) with the following:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"hermes tx raw packet-recv point_10687-1 cosmoshub-4 transfer channel-292\nhermes tx raw packet-ack point_10687-1 cosmoshub-4 transfer channel-292\nhermes tx raw packet-recv cosmoshub-4 point_10687-1 transfer channel-3\nhermes tx raw packet-ack cosmoshub-4 point_10687-1 transfer channel-3\n")))}u.isMDXComponent=!0}}]);